---
import MiniSearch, { type SearchResult } from 'minisearch';

import { Image } from 'astro:assets';

import { cn } from '@/cn';
import FormattedDate from '@/components/FormattedDate.astro';
import SearchInput from '@/components/SearchInput.react';
import BaseLayout from '@/layouts/Base.astro';
import { type Document, fields } from './search-index.json';

export const prerender = false;

const { searchTerm } = Astro.params;

const minisearch = MiniSearch.loadJSON<Document>(
  await fetch(Astro.site!.origin + '/q/search-index.json').then((r) => r.text()),
  { fields },
);
const results = (searchTerm ? minisearch.search(searchTerm).slice(0, 10) : []) as (SearchResult & Document)[];
---

<BaseLayout>
  <div class="grid w-full grid-cols-1 gap-8">
    <SearchInput client:load searchBaseUrl="/q/" defaultValue={searchTerm} transition:persist="blog-search" />
    {
      results.map((result, i) => (
        <a
          href={`/blog/${result.slug}/`}
          class={cn('flex w-full flex-col gap-8 rounded-xl p-4 outline-1 hover:outline lg:flex-row')}
        >
          {result.image && (
            <Image
              loading={i < 3 ? 'eager' : 'lazy'}
              transition:name={`${result.title}-image`}
              referrerpolicy="no-referrer"
              class="my-0 max-w-full rounded-lg lg:max-w-md"
              width={800}
              height={500}
              src={result.image}
              alt={result.title}
            />
          )}
          <div class="flex h-full flex-col justify-center gap-4 p-4 pl-0">
            <span class="text-2xl leading-tight" transition:name={`${result.title}-title`}>
              {result.title}
            </span>
            <span
              class="text-sm leading-tight text-secondary-foreground"
              transition:name={`${result.title}-description`}
            >
              {result.subtitle}
            </span>
            <div class="flex flex-wrap gap-2" transition:name={`${result.title}-tags`}>
              {result.tags.map((t) => (
                <span class="rounded-full border px-2 py-1 text-sm text-gray-500">{t}</span>
              ))}
            </div>
            <span class="text-sm leading-none text-secondary-foreground">
              <FormattedDate date={new Date(result.date)} />
            </span>
          </div>
        </a>
      ))
    }
  </div>
</BaseLayout>
